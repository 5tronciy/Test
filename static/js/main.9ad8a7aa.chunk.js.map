{"version":3,"sources":["components/Input.module.css","components/Output.module.css","components/deltaTimeItem.module.css","components/Input.tsx","components/deltaTimeItem.tsx","components/Output.tsx","utils/deltaTimeToStringConverter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Input","onCreate","onChangeText","onChangeDate","dateValue","onChangeTime","timeValue","params","className","styles","content","textBox","placeholder","onChange","dateBox","value","timeBox","type","create","onClick","to","buttonCreateName","InputConnected","useState","Date","setDate","setTime","textValue","setText","JSON","stringify","text","date","time","event","target","toString","DeltaTimeItem","deltaTimeItem","Output","deltaTime","appData","deltaTimeWrapper","map","OutputConnected","useParams","parse","today","dateFromInput","deltaTimeStrings","forEach","item","index","push","console","log","deltaTimeToStringConverter","getFullYear","getMonth","getDate","getHours","Number","slice","getMinutes","getSeconds","App","path","children","RouterConnected","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ad8a7aa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Input_content__3Ms3g\",\"textBox\":\"Input_textBox__2tdYE\",\"dateBox\":\"Input_dateBox__2bRCB\",\"timeBox\":\"Input_timeBox__3hJmJ\",\"create\":\"Input_create__FF9lA\",\"buttonCreateName\":\"Input_buttonCreateName__2UZFY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Output_content__EFIIJ\",\"text\":\"Output_text__1aN0g\",\"deltaTimeWrapper\":\"Output_deltaTimeWrapper__172J-\",\"deltaTime\":\"Output_deltaTime__Y1bnm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deltaTimeItem\":\"deltaTimeItem_deltaTimeItem__1wSTX\"};","import React, { useState } from \"react\";\r\nimport DatePicker from \"react-date-picker\";\r\nimport TimePicker, { TimePickerValue } from \"react-time-picker\";\r\nimport TextareaAutosize from \"react-textarea-autosize\";\r\nimport styles from \"./Input.module.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst InputConnected = () => {\r\n  const [dateValue, setDate] = useState(new Date());\r\n  const [timeValue, setTime] = useState('00:00');\r\n  const [textValue, setText] = useState(\"\");\r\n  const params = JSON.stringify({\r\n    text: textValue,\r\n    date: dateValue,\r\n    time: timeValue,\r\n  });\r\n\r\n  const onChangeText = (event: any) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const onChangeDate = (event: any) => {\r\n   setDate(event);\r\n  };\r\n  const onChangeTime = (event: TimePickerValue) => {\r\n    setTime(event.toString());\r\n  };\r\n  const onCreate = () => {};\r\n\r\n  return (\r\n    <Input\r\n      onCreate={onCreate}\r\n      onChangeText={onChangeText}\r\n      onChangeDate={onChangeDate}\r\n      dateValue={dateValue}\r\n      onChangeTime={onChangeTime}\r\n      timeValue={timeValue}\r\n      params={params}\r\n    />\r\n  );\r\n};\r\n\r\ninterface Props {\r\n  onCreate: ()=>void;\r\n  onChangeText: (event:any)=>void;\r\n  onChangeDate: (event: Date|Date[]) => void;\r\n  dateValue: Date | undefined;\r\n  onChangeTime: (event: TimePickerValue) => void;\r\n  timeValue: TimePickerValue;\r\n  params: string;\r\n}\r\n\r\nexport const Input = ({\r\n  onCreate,\r\n  onChangeText,\r\n  onChangeDate,\r\n  dateValue,\r\n  onChangeTime,\r\n  timeValue,\r\n  params,\r\n}: Props) => {\r\n  return (\r\n    <div className={styles.content}>\r\n      <div className={styles.textBox} placeholder=\"Любой текст...\">\r\n        <TextareaAutosize onChange={onChangeText} />\r\n      </div>\r\n\r\n      <div className={styles.dateBox} placeholder=\"Дата\">\r\n        <DatePicker onChange={onChangeDate} value={dateValue} />\r\n      </div>\r\n      <div className={styles.timeBox} placeholder=\"Время\">\r\n        <TimePicker onChange={onChangeTime} value={timeValue} />\r\n      </div>\r\n      <button type=\"button\" className={styles.create} onClick={onCreate}>\r\n        <Link to={params}>\r\n          <span className={styles.buttonCreateName}>Создать</span>\r\n        </Link>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputConnected;\r\n","import React from \"react\";\r\nimport styles from \"./deltaTimeItem.module.css\";\r\n\r\ninterface DeltaTimeItemInterface {\r\n  deltaTimeItem:string\r\n}\r\n\r\nconst deltaTimeItemConnected = ({ deltaTimeItem }: DeltaTimeItemInterface) => {\r\n  return <DeltaTimeItem deltaTimeItem={deltaTimeItem} />;\r\n};\r\n\r\nexport const DeltaTimeItem = ({ deltaTimeItem }: DeltaTimeItemInterface) => {\r\n  return <li className={styles.deltaTimeItem}>{deltaTimeItem}</li>;\r\n};\r\n\r\nexport default deltaTimeItemConnected;\r\n","import React from \"react\";\r\nimport { DeltaTimeItem } from \"./deltaTimeItem\";\r\nimport styles from \"./Output.module.css\";\r\nimport { useParams } from \"react-router\";\r\nimport { deltaTimeToStringConverter } from \"../utils/deltaTimeToStringConverter\";\r\n\r\ninterface Params {\r\n  params:string\r\n}\r\n\r\nconst OutputConnected = () => {\r\n  const { params }: Params = useParams();\r\n  const appData: AppData = JSON.parse(params);\r\n  const today = new Date();\r\n  const dateFromInput = new Date(appData.date);\r\n  const deltaTime = [\r\n    today.getFullYear() - dateFromInput.getFullYear(),\r\n    today.getMonth() - dateFromInput.getMonth(),\r\n    today.getDate() - dateFromInput.getDate(),\r\n    today.getHours() - Number(appData.time.slice(0, 2)),\r\n    today.getMinutes() - Number(appData.time.slice(3, 5)),\r\n    today.getSeconds(),\r\n  ];\r\n\r\n  const deltaTimeStrings: string[] = deltaTimeToStringConverter(deltaTime);\r\n\r\n  return <Output deltaTime={deltaTimeStrings} appData={appData} />;\r\n};\r\n\r\ninterface AppData {\r\n  text: string;\r\n  date: string;\r\n  time: string;\r\n}\r\n\r\ninterface Props {\r\n  deltaTime: string[];\r\n  appData: AppData;\r\n}\r\n\r\nexport const Output = ({ deltaTime, appData }: Props) => {\r\n  return (\r\n    <div className={styles.content}>\r\n      <div className={styles.text}>{appData.text}</div>\r\n      <div className={styles.deltaTimeWrapper}>\r\n        <ul className={styles.deltaTime}>\r\n          {deltaTime.map((deltaTimeItem: string) => (\r\n            <DeltaTimeItem deltaTimeItem={deltaTimeItem} key={deltaTimeItem} />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OutputConnected;\r\n","export function deltaTimeToStringConverter(deltaTime: number[]) {\r\n  const deltaTimeStrings: string[] = [];\r\n  deltaTime.forEach((item, index) => {\r\n    switch (index) {\r\n      case 0:\r\n        if (item < 0) {\r\n          item = -item;\r\n        }\r\n        item === 1\r\n          ? deltaTimeStrings.push(`${item} год`)\r\n          : item > 1 && item < 5\r\n          ? deltaTimeStrings.push(`${item} года`)\r\n          : deltaTimeStrings.push(`${item} лет`);\r\n        break;\r\n      case 1:\r\n        if (item < 0) {\r\n          item = -item;\r\n        }\r\n        item === 1\r\n          ? deltaTimeStrings.push(`${item} месяц`)\r\n          : item > 1 && item < 5\r\n          ? deltaTimeStrings.push(`${item} месяца`)\r\n          : deltaTimeStrings.push(`${item} месяцев`);\r\n        break;\r\n      case 2:\r\n        if (item < 0) {\r\n          item = -item;\r\n        }\r\n        item === 1\r\n          ? deltaTimeStrings.push(`${item} день`)\r\n          : item > 1 && item < 5\r\n          ? deltaTimeStrings.push(`${item} дня`)\r\n          : deltaTimeStrings.push(`${item} дней`);\r\n        break;\r\n      case 3:\r\n        if (item < 0) {\r\n          item += 24;\r\n        }\r\n        item % 20 === 1\r\n          ? deltaTimeStrings.push(`${item} час`)\r\n          : (item > 1 && item < 5) || (item > 21 && item < 24)\r\n          ? deltaTimeStrings.push(`${item} часа`)\r\n          : deltaTimeStrings.push(`${item} часов`);\r\n        break;\r\n      case 4:\r\n        if (item < 0) {\r\n          item += 60;\r\n        }\r\n        item === 1 || (item > 20 && item % 10 === 1)\r\n          ? deltaTimeStrings.push(`${item} минута`)\r\n          : (item > 1 && item < 5) ||\r\n            (item > 20 && item % 10 > 1 && item % 10 < 5)\r\n          ? deltaTimeStrings.push(`${item} минуты`)\r\n          : deltaTimeStrings.push(`${item} минут`);\r\n        break;\r\n      case 5:\r\n        item === 1 || (item > 20 && item % 10 === 1)\r\n          ? deltaTimeStrings.push(`${item} секунда`)\r\n          : (item > 1 && item < 5) ||\r\n            (item > 20 && item % 10 > 1 && item % 10 < 5)\r\n          ? deltaTimeStrings.push(`${item} секунды`)\r\n          : deltaTimeStrings.push(`${item} секунд`);\r\n        break;\r\n    }\r\n  });\r\n\r\n  deltaTimeStrings.forEach((item: string, index: number) => {\r\n    item[0] === \"0\" ? delete deltaTimeStrings[index] : console.log(item);\r\n  });\r\n\r\n  return deltaTimeStrings;\r\n}\r\n","import React from \"react\";\r\nimport Input from \"./components/Input\";\r\nimport Output from \"./components/Output\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nconst RouterConnected = () => {\r\n  return <App />;\r\n};\r\n\r\nexport const App = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/Test\" children={<Input />} />\r\n        <Route path=\"/:params\" children={<Output />} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default RouterConnected;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}